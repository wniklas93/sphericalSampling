import numpy as np
import scipy as sp

from interpolationSphere.sphericalSampling import interpolationOnSphere
from interpolationSphere.sphericalSampling import uniformSampling_unitSphere
################################################################################
def test_k_h():
    #Check on positive definitness of kernel matrices generated by radial
    #basis functions:

    #1) generate sample points:
    N = 500                     #Number of points
    p_euclid_f, p_sphere_f = uniformSampling_unitSphere.sampleUnitSphere_geometric_fibonacci(N)

    #2) generate kernel matrices for different radial basis functions:
    k_h_gaussian = interpolationOnSphere._k_h('gaussian', p_euclid_f, p_euclid_f)
    k_h_invMultiquadric = interpolationOnSphere._k_h('invMultiquadric', p_euclid_f, p_euclid_f)
    k_h_polyh_spline = interpolationOnSphere._k_h('TPF', p_euclid_f, p_euclid_f)

    #3) Check on symmetry:
    assert np.all(k_h_gaussian == k_h_gaussian.T)
    assert np.all(k_h_invMultiquadric == k_h_invMultiquadric.T)
    assert np.all(k_h_polyh_spline == k_h_polyh_spline.T)

    #4)Check on positive definitess:
    eps = 0.00001

    u, v = np.linalg.eig(k_h_gaussian)
    assert np.all(np.abs(np.imag(u)) <= eps)
    assert np.all(np.real(u) > -eps)


    u, v = np.linalg.eig(k_h_invMultiquadric)
    assert np.all(np.abs(np.imag(u)) <= eps)
    assert np.all(np.real(u) > -eps)

    u, v = np.linalg.eig(k_h_polyh_spline)
    assert np.all(np.abs(np.imag(u)) <= eps)
    assert np.all(np.real(u) > -eps)




#%%

















#%%
